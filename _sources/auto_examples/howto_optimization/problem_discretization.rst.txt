
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/howto_optimization/problem_discretization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_howto_optimization_problem_discretization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_howto_optimization_problem_discretization.py:


Discretization of the defined area.
===================================

.. sectionauthor: Pauline Werner (HTWK Leipzig)

First, some minimal example usage:

.. GENERATED FROM PYTHON SOURCE LINES 11-12

Import necessary python packages and functions

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: Python


    import matplotlib.pyplot as plt
    import pandas as pd
    from shapely.geometry import Polygon

    from easyquart.bhe_optimization.core.area import Area
    from easyquart.bhe_optimization.core.obstacle import House


.. GENERATED FROM PYTHON SOURCE LINES 21-22

Defining the area as a shapely Polygon with a buffer

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: Python

    area_polygon = Polygon([(0, 0), (5, 0), (5, 6), (0, 6)])
    d_buffer = 1.0  # Shrinking buffer of 0.5 m


.. GENERATED FROM PYTHON SOURCE LINES 26-27

Creating obstacles as instances of House, Tree or Undefined

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: Python

    obstacles = [
        House(Polygon([(3, 4), (5, 4), (5, 6), (3, 6)])),  # House obstacle
    ]


.. GENERATED FROM PYTHON SOURCE LINES 32-33

Create an Area instance with obstacles

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: Python

    area = Area(area_polygon, d_buffer, obstacles)


.. GENERATED FROM PYTHON SOURCE LINES 36-37

Generate valid points

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    resolution_meter = 1.0
    valid_points = area.generate_valid_points(resolution_meter)


.. GENERATED FROM PYTHON SOURCE LINES 41-42

Convert valid points to Pandas DataFrame for better visualization

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python

    df_valid_points = pd.DataFrame(
        [(i, j, p.x, p.y) for i, j, p in valid_points],
        columns=["x_index", "y_index", "x_coord", "y_coord"],
    )
    print(df_valid_points.to_string(index=False))


.. GENERATED FROM PYTHON SOURCE LINES 49-50

Demonstration: Plotting the area, obstacles and valid points

.. GENERATED FROM PYTHON SOURCE LINES 50-72

.. code-block:: Python

    fig, ax = plt.subplots()

    # Plot original area
    x, y = area.polygon.exterior.xy
    ax.plot(x, y, label="Original Area", color="black", linestyle="dashed")

    # Plot buffered area
    x, y = area.buffered_polygon().exterior.xy
    ax.plot(x, y, label="Buffered Area", color="blue")

    # Plot obstacles
    for obs in obstacles:
        x, y = obs.polygon.exterior.xy
        ax.fill(x, y, color="red", alpha=0.5, label="Obstacle")

    # Extract x and y coordinates from indexed valid points and plot them
    x_valid = [p.x for _, _, p in valid_points]
    y_valid = [p.y for _, _, p in valid_points]
    ax.scatter(x_valid, y_valid, color="green", s=10, label="Valid Points")

    ax.set_aspect("equal")
    plt.show()


.. _sphx_glr_download_auto_examples_howto_optimization_problem_discretization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: problem_discretization.ipynb <problem_discretization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: problem_discretization.py <problem_discretization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: problem_discretization.zip <problem_discretization.zip>`
