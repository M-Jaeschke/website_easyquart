
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/howto_digital_twin/plot_usecase_digital_twin.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_howto_digital_twin_plot_usecase_digital_twin.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_howto_digital_twin_plot_usecase_digital_twin.py:


Example usage of the DigitalTwin Class
==================================

.. sectionauthor: Max Jäschke (HTWK Leipzig)

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Import the needed packages and the digital twin class

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: Python


    from pathlib import Path
    from tempfile import mkdtemp

    import matplotlib.pyplot as plt
    import numpy as np

    from easyquart.digital_twin import DigitalTwinEasyQuart








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Define simple data arrays to demonstrate the showcase

.. GENERATED FROM PYTHON SOURCE LINES 22-33

.. code-block:: Python


    timevalues = np.linspace(start=0, stop=10, num=11)
    network_flow_rate = np.full(11, 0.002)
    building_power = np.full(11, 1000)
    bhe_to_network_temperatures = np.tile(np.array([273.15, 280.15]), 11)
    bhe_to_network_avg_temperature = np.full(11, 273.15)
    network_to_bhe_temperatures = np.tile(np.array([273.15, 280.15]), 11)
    network_to_bhe_avg_temperature = np.full(11, 273.15)
    network_to_building_temperature = np.full(11, 273.15)
    building_to_network_temperature = np.full(11, 273.15)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Create class object with known values from the building and HVAC simulation and write to file

.. GENERATED FROM PYTHON SOURCE LINES 35-51

.. code-block:: Python


    tmp_dir = Path(mkdtemp())
    h5_file = tmp_dir / "iter_0.h5"

    building_digital_twin = DigitalTwinEasyQuart(
        rho_refrigerant=1000,
        cp_refrigerant=4000.0,
        timevalues=timevalues,
        network_flow_rate=network_flow_rate,
        networkToBuilding_temperature=network_to_building_temperature,
        buildingToNetwork_temperature=building_to_network_temperature,
        building_power=building_power,
    )

    building_digital_twin.save_h5(h5_file)








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Load the data from file and use it e.g. for the network or subsurface simulation

.. GENERATED FROM PYTHON SOURCE LINES 53-67

.. code-block:: Python


    digital_twin_iter0 = DigitalTwinEasyQuart.load_h5(h5_file)

    modelica_txt_file = tmp_dir / "input_modelica.txt"
    digital_twin_iter0.write_dataclass_to_txt(
        columns_to_write=[
            "timevalues",
            "network_flow_rate",
            "buildingToNetwork_temperature",
        ],
        path_for_txt=modelica_txt_file,
        table_name="network_input_from_building",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The file has been successfully saved as /var/folders/nv/w1zw8hk556sg55ypt4hgm_j40000gn/T/tmppy_a3top/input_modelica.txt.




.. GENERATED FROM PYTHON SOURCE LINES 68-69

Perform the network or subsurface simulation and store all results by overwriting file

.. GENERATED FROM PYTHON SOURCE LINES 69-79

.. code-block:: Python


    digital_twin_iter0.networkToBHE_avg_temperature = network_to_bhe_avg_temperature
    digital_twin_iter0.networkToBHE_temperatures = network_to_bhe_temperatures

    digital_twin_iter0.bheToNetwork_avg_temperature = bhe_to_network_avg_temperature

    digital_twin_iter0.bheToNetwork_temperatures = bhe_to_network_temperatures

    digital_twin_iter0.save_h5(h5_file)








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Use the results for plotting and further analysis

.. GENERATED FROM PYTHON SOURCE LINES 81-95

.. code-block:: Python


    plt.plot(
        digital_twin_iter0.timevalues,
        digital_twin_iter0.bheToNetwork_avg_temperature - 273.15,
        label="BHEtoNetwork",
    )
    plt.plot(
        digital_twin_iter0.timevalues,
        digital_twin_iter0.bheToNetwork_avg_temperature - 273.15,
        label="NetworkToBHE",
    )
    plt.ylabel(r"$\vartheta$ in °C")
    plt.xlabel("t in s")
    plt.show()



.. image-sg:: /auto_examples/howto_digital_twin/images/sphx_glr_plot_usecase_digital_twin_001.png
   :alt: plot usecase digital twin
   :srcset: /auto_examples/howto_digital_twin/images/sphx_glr_plot_usecase_digital_twin_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.060 seconds)


.. _sphx_glr_download_auto_examples_howto_digital_twin_plot_usecase_digital_twin.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_usecase_digital_twin.ipynb <plot_usecase_digital_twin.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_usecase_digital_twin.py <plot_usecase_digital_twin.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_usecase_digital_twin.zip <plot_usecase_digital_twin.zip>`
